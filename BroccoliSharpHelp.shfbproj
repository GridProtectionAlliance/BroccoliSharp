<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which assemblies to include from solution and
				 project documentation sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{d126b0a3-a11e-428d-b69c-5d06f2b05849}</ProjectGuid>
    <SHFBSchemaVersion>1.9.9.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <FrameworkVersion>.NET Framework 4.5</FrameworkVersion>
    <OutputPath>..\Build\Help\</OutputPath>
    <HtmlHelpName>BroccoliSharp</HtmlHelpName>
    <Language>en-US</Language>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <BuildLogFile>BroccoliSharpHelp.log</BuildLogFile>
    <HelpFileFormat>HtmlHelp1, Website</HelpFileFormat>
    <IndentHtml>True</IndentHtml>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CppCommentsFixup>False</CppCommentsFixup>
    <CleanIntermediates>True</CleanIntermediates>
    <MaximumGroupParts>2</MaximumGroupParts>
    <NamespaceGrouping>True</NamespaceGrouping>
    <SyntaxFilters>C#, Visual Basic, F#, J#, JavaScript</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceTitle>BroccoliSharp Library</RootNamespaceTitle>
    <RootNamespaceContainer>True</RootNamespaceContainer>
    <PresentationStyle>VS2013</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>MemberName</NamingMethod>
    <HelpTitle>BroccoliSharp Documentation</HelpTitle>
    <FeedbackEMailLinkText>GPA Development</FeedbackEMailLinkText>
    <FeedbackEMailAddress>rcarroll%40gridprotectionalliance.org</FeedbackEMailAddress>
    <CopyrightText>Copyright &amp;#169%3b 2014, Grid Protection Alliance.  All Rights Reserved.</CopyrightText>
    <CopyrightHref>https://www.gridprotectionalliance.org/</CopyrightHref>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <CatalogName>VisualStudio11</CatalogName>
    <TocParentId>-1</TocParentId>
    <TocParentVersion>100</TocParentVersion>
    <TopicVersion>100</TopicVersion>
    <TocOrder>-1</TocOrder>
    <ProductTitle>BroccoliSharp</ProductTitle>
    <VendorName>Grid Protection Alliance</VendorName>
    <MSHelpViewerSdkLinkType>Msdn</MSHelpViewerSdkLinkType>
    <CatalogVersion>100</CatalogVersion>
    <CatalogProductId>VS</CatalogProductId>
    <DocumentationSources>
      <DocumentationSource sourceFile="BroccoliSharp.csproj" />
    </DocumentationSources>
    <ProjectSummary>&amp;lt%3b!-- This HTML copied from body tag of Readme.html - this needs to be valid XML, so use simple HTML and remember that non-breaking space is not allowed --&amp;gt%3b

    &amp;lt%3bh1&amp;gt%3bBroccoliSharp: A .NET implementation of the Bro Client Communications Library.&amp;lt%3b/h1&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        BroccoliSharp is a set of managed C# based .NET classes and structures that wrap
        Broccoli, the &amp;quot%3bBro client communications library&amp;quot%3b. This library fully implements
        the Broccoli API and will allow you to create client sensors for the Bro intrusion
        detection system, receive Bro IDs, send and receive Bro events, as well as send
        and receive event requests to and from peering Bros. As in the native C Broccoli
        API, you can currently create and receive values of pure types like integers,
        counters, timestamps, IP addresses, port numbers, booleans, and strings.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        BroccoliSharp is free software under terms of the BSD license as provided in the
        LICENSE.txt file distributed with the source code.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        More details on BroccoliSharp usage can be found in the documentation related to
        the primary data structures. It is expected that the developer is already familiar
        with basic Bro concepts before using the BroccoliSharp library.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        Many of the following documentation topics have been derived from key portions of the official
        &amp;lt%3ba href=&amp;quot%3bhttps://www.bro.org/sphinx/components/broccoli/broccoli-manual.html&amp;quot%3b&amp;gt%3bBroccoli documentation&amp;lt%3b/a&amp;gt%3b
        put into context of using BroccoliSharp from a .NET application. Many topics also include usage
        examples in C#. The &amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroConnection.htm&amp;quot%3b&amp;gt%3bBroConnection class&amp;lt%3b/a&amp;gt%3b topic remarks
        also include examples in VB.NET and Java using &amp;lt%3ba href=&amp;quot%3bhttp://www.ikvm.net/&amp;quot%3b&amp;gt%3bIKVM.NET&amp;lt%3b/a&amp;gt%3b.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bul&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on how to manage connections, handle connections classes, and compose and send
            events using BroccoliSharp, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroConnection.htm&amp;quot%3b&amp;gt%3bBroConnection class&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on how to handle record structures in BroccoliSharp, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroRecord.htm&amp;quot%3b&amp;gt%3bBroRecord class&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on how to handle tables and composite keys in BroccoliSharp, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroTable.htm&amp;quot%3b&amp;gt%3bBroTable class&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on how to handle sets in BroccoliSharp, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroSet.htm&amp;quot%3b&amp;gt%3bBroSet class&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on how BroccoliSharp safely passes strongly-typed values into Broccoli API functions
            with void%2a values, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroValue.htm&amp;quot%3b&amp;gt%3bBroValue class&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
        &amp;lt%3bli&amp;gt%3b
            For details on the BroccoliSharp structures and classes that are associated with each of
            the Bro types, see topic remarks for the:
            &amp;lt%3bul style=&amp;quot%3blist-style-type: none&amp;quot%3b&amp;gt%3b
                &amp;lt%3bli&amp;gt%3b&amp;lt%3ba href=&amp;quot%3bT_BroccoliSharp_BroType.htm&amp;quot%3b&amp;gt%3bBroType enumeration&amp;lt%3b/a&amp;gt%3b&amp;lt%3b/li&amp;gt%3b
            &amp;lt%3b/ul&amp;gt%3b
        &amp;lt%3b/li&amp;gt%3b
    &amp;lt%3b/ul&amp;gt%3b

    &amp;lt%3bh2&amp;gt%3bDownload&amp;lt%3b/h2&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        You can find the latest BroccoliSharp release for download at 
        &amp;lt%3ba href=&amp;quot%3bhttps://www.gridprotectionalliance.org/NightlyBuilds/BroccoliSharp/Beta/BroccoliSharp.zip&amp;quot%3b&amp;gt%3bGPA Nightly Builds&amp;lt%3b/a&amp;gt%3b
        %28for now%29.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        BroccoliSharps’s git repository is located at &amp;amp%3blt%3b&amp;lt%3bb&amp;gt%3btbd git location&amp;lt%3b/b&amp;gt%3b&amp;amp%3bgt%3b.
        You can browse the repository &amp;amp%3blt%3b&amp;lt%3bb&amp;gt%3btbd git location&amp;lt%3b/b&amp;gt%3b&amp;amp%3bgt%3b.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        This document describes BroccoliSharp 1.0.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bh2&amp;gt%3bInstallation&amp;lt%3b/h2&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        The BroccoliSharp library
        has only been tested on Linux so far.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bh3&amp;gt%3bPrerequisites&amp;lt%3b/h3&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        BroccoliSharp requires the following
        libraries which need to be installed before you begin:
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp style=&amp;#39%3btext-indent: .5in&amp;#39%3b&amp;gt%3b
        &amp;lt%3bspan style=&amp;#39%3bfont-family: Symbol&amp;#39%3b&amp;gt%3b&amp;#183%3b&amp;amp%3b#160%3b&amp;lt%3b/span&amp;gt%3b&amp;amp%3b#160%3b        
        &amp;lt%3ba href=&amp;quot%3bhttps://www.bro.org/download/&amp;quot%3b&amp;gt%3bThe Broccoli library&amp;lt%3b/a&amp;gt%3b
        %28of course!%29, Broccoli has its own requirements, see
        &amp;lt%3ba href=&amp;quot%3bhttps://www.bro.org/sphinx/components/broccoli/README.html&amp;quot%3b&amp;gt%3bdocs&amp;lt%3b/a&amp;gt%3b.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp style=&amp;#39%3btext-indent: .5in&amp;#39%3b&amp;gt%3b
        &amp;lt%3bspan style=&amp;#39%3bfont-family: Symbol&amp;#39%3b&amp;gt%3b&amp;#183%3b&amp;amp%3b#160%3b&amp;lt%3b/span&amp;gt%3b&amp;amp%3b#160%3b
        &amp;lt%3ba href=&amp;quot%3bhttp://www.mono-project.com/download/#download-lin&amp;quot%3b&amp;gt%3bMono&amp;lt%3b/a&amp;gt%3b –
        version supporting.NET 4.5 is preferred but may not be required.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bh3&amp;gt%3bBuilding BroccoliSharp&amp;lt%3b/h3&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        To build the BroccoliSharp library using Mono you can use xbuild:
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp style=&amp;#39%3btext-indent: .5in&amp;#39%3b&amp;gt%3b
        xbuild /p:Configuration=Release BroccoliSharp.sln
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        To build BroccoliSharp to work with a Broccoli release that has disabled PCAP support, use:
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp style=&amp;#39%3btext-indent: .5in&amp;#39%3b&amp;gt%3b
        xbuild /p:Configuration=ReleaseNoPCAP BroccoliSharp.sln
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        You can also build the library on Windows using Visual Studio, however the binaries built on Windows
        will only work on Linux if the Mono release at least supports .NET 4.5.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bp&amp;gt%3b
        Once the BroccoliSharp.dll exists %28found in Build/Output/Release folder relative to solution%29 you can
        add a reference to the library in your .NET projects and begin using BroccoliSharp.
    &amp;lt%3b/p&amp;gt%3b

    &amp;lt%3bh3&amp;gt%3bAbout the Code&amp;lt%3b/h3&amp;gt%3b
    
    &amp;lt%3bp&amp;gt%3b
        When building inside Visual Studio code analysis is enabled for this project. A rule set is included
        with the source code %28i.e., BroccoliSharp.ruleset%29 that defines the analysis rules that are enabled for
        the project. Note that this rule set is basically just the &amp;quot%3bMicrosoft Managed Recommended Rules&amp;quot%3b with
        one rule turned off: CA1060: Move P/Invokes to NativeMethods class. This rule wants to force the name
        of the imported Bro API functions class to be &amp;quot%3bNativeMethods&amp;quot%3b, but I prefer &amp;quot%3bBroAPI&amp;quot%3b for this project.
    &amp;lt%3b/p&amp;gt%3b
    &amp;lt%3bp&amp;gt%3b
        The code has also been through extensive analysis using the 
        &amp;lt%3ba href=&amp;quot%3bhttp://www.mono-project.com/docs/tools+libraries/tools/gendarme/&amp;quot%3b&amp;gt%3bGendarme&amp;lt%3b/a&amp;gt%3b tool. All
        items it reports have been reviewed thoroughly - there are no issues of concern. A future to-do could
        be to create an exclusion list with justifications.
    &amp;lt%3b/p&amp;gt%3b
</ProjectSummary>
    <VisibleItems>Attributes, InheritedMembers, InheritedFrameworkMembers, Protected, ProtectedInternalAsProtected</VisibleItems>
    <ComponentConfigurations>
      <ComponentConfig id="Code Block Component" enabled="True">
        <component id="Code Block Component">
          <basePath value="{@HtmlEncProjectFolder}" />
          <outputPaths>{@HelpFormatOutputPaths}</outputPaths>
          <allowMissingSource value="false" />
          <removeRegionMarkers value="false" />
          <colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml" styleFile="{@SHFBFolder}Colorizer\highlight.xsl" stylesheet="{@SHFBFolder}Colorizer\highlight.css" scriptFile="{@SHFBFolder}Colorizer\highlight.js" disabled="{@DisableCodeBlockComponent}" language="cs" tabSize="0" numberLines="false" outlining="false" keepSeeTags="false" defaultTitle="true" />
        </component>
      </ComponentConfig>
      <ComponentConfig id="IntelliSense Component" enabled="True">
        <component id="IntelliSense Component">
          <!-- Output options (optional)
  Attributes:
    Include namespaces (false by default)
    Namespaces comments filename ("Namespaces" if not specified or empty)
    Output folder (current folder if not specified or empty) -->
          <output includeNamespaces="false" namespacesFile="Namespaces" folder="{@OutputFolder}" />
        </component>
      </ComponentConfig>
    </ComponentConfigurations>
    <TransformComponentArguments>
      <Argument Key="logoFile" Value="BroccoliSharp.png" />
      <Argument Key="logoHeight" Value="" />
      <Argument Key="logoWidth" Value="" />
      <Argument Key="logoAltText" Value="BroccoliSharp" />
      <Argument Key="logoPlacement" Value="left" />
      <Argument Key="logoAlignment" Value="left" />
      <Argument Key="maxVersionParts" Value="" />
      <Argument Key="defaultLanguage" Value="cs" />
    </TransformComponentArguments>
    <FooterText>See &amp;lt%3ba href=&amp;quot%3bhttps://www.bro.org/sphinx/components/broccoli/broccoli-manual.html&amp;quot%3b&amp;gt%3bBro Client Communications Library&amp;lt%3b/a&amp;gt%3b manual for corresponding C API usage.</FooterText>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="BroccoliSharp" isDocumented="True" />
      <NamespaceSummaryItem name="(global)" isDocumented="True" />
    </NamespaceSummaries>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in order for Visual Studio to perform
			 the build.  The others are optional common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <ItemGroup>
    <Folder Include="Icons\" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Icons\BroccoliSharp.png">
      <ImageId>BroccoliSharp</ImageId>
      <AlternateText>Broccoli Sharp</AlternateText>
    </Content>
  </ItemGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>